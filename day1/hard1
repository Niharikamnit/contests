https://codedrills.io/contests/interview-practice-round-26/problems/chess

You are given a N x N chessboard and N Queen pieces. A Queen piece can move any number of square vertically, horizontally or diagonally. You need to arrange these N queens in the chessboard in such a way that they do not attack each other. You need to return a list all valid distinct chessboard combinations. You may return the boards in any order.

Note: The chessboard is defined as a list of strings. Each string denotes a row of the chessboard. The chessboard contains two types of cells, '.' denotes an empty cell, 'Q' denotes a Queen has been places in that cell.
Sample 1
Input
N : 4

Output
[[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]

Explanation
For N = 4, there are exactly 2 valid chessboard arrangements:

. Q . .
. . . Q
Q . . .
. . Q .

. . Q .
Q . . .
. . . Q
. Q . .
In both of the above arrangements of queens, none of them attack each other. Hence we return these arrangements.



BACKTRACKINNNGGG----

bool isSafe(int board[N][N], int row, int col)
{
    int i, j;
  
    /* Check this row on left side */
    for (i = 0; i < col; i++)
        if (board[row][i])
            return false;
  
    /* Check upper diagonal on left side */
    for (i = row, j = col; i >= 0 && j >= 0; i--, j--)
        if (board[i][j])
            return false;
  
    /* Check lower diagonal on left side */
    for (i = row, j = col; j >= 0 && i < N; i++, j--)
        if (board[i][j])
            return false;
  
    return true;
}

bool solveNQUtil(int board[N][N], int row)
{
    /* base case: If all queens are placed
      then return true */
    if (row >= N)
        return true;
  
    /* Consider this row and try placing
       this queen in all cols one by one */
    for (int col = 0; col< N; col++) {
        /* Check if the queen can be placed on
          board[row][col] */
        if (isSafe(board, row, col)) {
            /* Place this queen in board[row][col] */
            board[row][col] = 1;
  
            /* recur to place rest of the queens */
            if (solveNQUtil(board, row + 1))
                return true;
  
            /* If placing queen in board[row][col]
               doesn't lead to a solution, then
               remove queen from board[i][col] */
            board[row][col] = 0; // BACKTRACK step
        }
    }
  
    /* If the queen cannot be placed in any row in
        this colum col  then return false */
    return false;
}

bool solveNQ()
{
    int board[N][N] = { { 0, 0, 0, 0 },
                        { 0, 0, 0, 0 },
                        { 0, 0, 0, 0 },
                        { 0, 0, 0, 0 } };
  
    if (solveNQUtil(board, 0) == false) {
        printf("Solution does not exist");
        return false;
    }
  
    printSolution(board);
    return true;
}
